{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_sliced_to_array.js","node_modules/@swc/helpers/esm/_array_with_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array_limit.js","node_modules/@swc/helpers/esm/_non_iterable_rest.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $09cbfe85151ea6c6$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n\nfunction $8ca2848f896a6803$export$71511d61b312f219(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\n\n\nfunction $a0bc1859061deae1$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $efec029548ccee7f$export$71511d61b312f219(arr, i) {\n    return (0, $09cbfe85151ea6c6$export$71511d61b312f219)(arr) || (0, $8ca2848f896a6803$export$71511d61b312f219)(arr, i) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr, i) || (0, $a0bc1859061deae1$export$71511d61b312f219)();\n}\n\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.size = 4;\n        this.board = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"idle\"; // 'idle', 'playing', 'win', 'lose'\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                if (this.status !== \"playing\") return;\n                var moved = false;\n                for(var row = 0; row < this.size; row++){\n                    var originalRow = (0, $227c6742e0ff6f82$export$71511d61b312f219)(this.board[row]);\n                    var newRow = [];\n                    for(var col = 0; col < this.size; col++)if (this.board[row][col] !== 0) newRow.push(this.board[row][col]);\n                    // Злиття плиток\n                    var mergedRow = [];\n                    for(var i = 0; i < newRow.length; i++)if (newRow[i] === newRow[i + 1]) {\n                        mergedRow.push(newRow[i] * 2);\n                        this.score += newRow[i] * 2;\n                        i++;\n                    } else mergedRow.push(newRow[i]);\n                    // Заповнення порожніх клітинок нулями\n                    while(mergedRow.length < this.size)mergedRow.push(0);\n                    // Оновлюємо дошку тільки якщо змінилася\n                    if (JSON.stringify(originalRow) !== JSON.stringify(mergedRow)) {\n                        this.board[row] = mergedRow;\n                        moved = true;\n                    }\n                }\n                // Додаємо випадкову плитку лише якщо дошка змінилася\n                if (moved) this.addRandomTile();\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this, _loop = function(row) {\n                    var originalRow = (0, $227c6742e0ff6f82$export$71511d61b312f219)(_this.board[row]);\n                    var reversedRow = (0, $227c6742e0ff6f82$export$71511d61b312f219)(originalRow).reverse();\n                    var filtered = reversedRow.filter(function(val) {\n                        return val !== 0;\n                    });\n                    var merged = [];\n                    for(var i = 0; i < filtered.length; i++)if (filtered[i] === filtered[i + 1]) {\n                        merged.push(filtered[i] * 2);\n                        _this.score += filtered[i] * 2;\n                        i++;\n                    } else merged.push(filtered[i]);\n                    while(merged.length < _this.size)merged.push(0);\n                    var newRow = merged.reverse();\n                    if (JSON.stringify(originalRow) !== JSON.stringify(newRow)) {\n                        _this.board[row] = newRow;\n                        moved = true;\n                    }\n                };\n                if (this.status !== \"playing\") return;\n                var moved = false;\n                for(var row = 0; row < this.size; row++)_loop(row);\n                if (moved) this.addRandomTile();\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this, _loop = function(col) {\n                    var originalColumn = [];\n                    for(var row = 0; row < _this.size; row++)originalColumn.push(_this.board[row][col]);\n                    var filtered = originalColumn.filter(function(val) {\n                        return val !== 0;\n                    });\n                    var merged = [];\n                    for(var i = 0; i < filtered.length; i++)if (filtered[i] === filtered[i + 1]) {\n                        merged.push(filtered[i] * 2);\n                        _this.score += filtered[i] * 2;\n                        i++;\n                    } else merged.push(filtered[i]);\n                    while(merged.length < _this.size)merged.push(0);\n                    var movedColumn = merged;\n                    for(var row1 = 0; row1 < _this.size; row1++){\n                        if (_this.board[row1][col] !== movedColumn[row1]) moved = true;\n                        _this.board[row1][col] = movedColumn[row1];\n                    }\n                };\n                if (this.status !== \"playing\") return;\n                var moved = false;\n                for(var col = 0; col < this.size; col++)_loop(col);\n                if (moved) this.addRandomTile();\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this, _loop = function(col) {\n                    var originalColumn = [];\n                    for(var row = _this.size - 1; row >= 0; row--)originalColumn.push(_this.board[row][col]);\n                    var filtered = originalColumn.filter(function(val) {\n                        return val !== 0;\n                    });\n                    var merged = [];\n                    for(var i = 0; i < filtered.length; i++)if (filtered[i] === filtered[i + 1]) {\n                        merged.push(filtered[i] * 2);\n                        _this.score += filtered[i] * 2;\n                        i++; // пропускаємо наступний\n                    } else merged.push(filtered[i]);\n                    while(merged.length < _this.size)merged.push(0);\n                    for(var row1 = _this.size - 1; row1 >= 0; row1--){\n                        var newValue = merged[_this.size - 1 - row1];\n                        if (_this.board[row1][col] !== newValue) {\n                            moved = true;\n                            _this.board[row1][col] = newValue;\n                        }\n                    }\n                };\n                if (this.status !== \"playing\") return;\n                var moved = false;\n                for(var col = 0; col < this.size; col++)_loop(col);\n                if (moved) this.addRandomTile();\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                if (this.isGameWon()) this.status = \"win\";\n                else if (this.isGameLost()) this.status = \"lose\";\n                else if (this.isGameInProgress()) this.status = \"playing\";\n                else this.status = \"idle\";\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.status = \"playing\";\n                this.addRandomTile();\n                this.addRandomTile();\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.board = [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n                this.score = 0;\n                this.status = \"idle\";\n                this.start();\n            }\n        },\n        {\n            /**\n   * Adds a random tile to the board.\n   *\n   * @returns {number[][]}\n   */ key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyTiles = this.getEmptyTiles();\n                if (emptyTiles.length === 0) return;\n                var randomIndex = Math.floor(Math.random() * emptyTiles.length);\n                var _emptyTiles_randomIndex = (0, $efec029548ccee7f$export$71511d61b312f219)(emptyTiles[randomIndex], 2), row = _emptyTiles_randomIndex[0], col = _emptyTiles_randomIndex[1];\n                this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n                this.score += this.board[row][col];\n                this.status = \"playing\";\n            }\n        },\n        {\n            /**\n   * Returns the empty tiles on the board.\n   *\n   * @returns {number[][]}\n   */ key: \"getEmptyTiles\",\n            value: function getEmptyTiles() {\n                var emptyTiles = [];\n                for(var row = 0; row < this.size; row++){\n                    for(var col = 0; col < this.size; col++)if (this.board[row][col] === 0) emptyTiles.push([\n                        row,\n                        col\n                    ]);\n                }\n                return emptyTiles;\n            }\n        },\n        {\n            /**\n   * Checks if the game is over.\n   *\n   * @returns {boolean}\n   */ key: \"isGameOver\",\n            value: function isGameOver() {\n                // Check if there are any empty tiles\n                if (this.getEmptyTiles().length > 0) return false;\n                // Check if there are any possible moves\n                for(var row = 0; row < this.size; row++)for(var col = 0; col < this.size; col++){\n                    if (col < this.size - 1 && this.board[row][col] === this.board[row][col + 1] || row < this.size - 1 && this.board[row][col] === this.board[row + 1][col]) return false;\n                }\n                return true;\n            }\n        },\n        {\n            /**\n   * Checks if the game is won.\n   *\n   * @returns {boolean}\n   */ key: \"isGameWon\",\n            value: function isGameWon() {\n                for(var row = 0; row < this.size; row++)for(var col = 0; col < this.size; col++){\n                    if (this.board[row][col] === 2048) return true;\n                }\n                return false;\n            }\n        },\n        {\n            /**\n   * Checks if the game is lost.\n   *\n   * @returns {boolean}\n   */ key: \"isGameLost\",\n            value: function isGameLost() {\n                return this.isGameOver() && !this.isGameWon();\n            }\n        },\n        {\n            /**\n   * Checks if the game is in progress.\n   *\n   * @returns {boolean}\n   */ key: \"isGameInProgress\",\n            value: function isGameInProgress() {\n                return this.status === \"playing\";\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\ndocument.addEventListener(\"keydown\", function(e) {\n    if ($197cd56b15c33885$var$game.getStatus() === \"playing\") {\n        switch(e.key){\n            case \"ArrowLeft\":\n                $197cd56b15c33885$var$game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                $197cd56b15c33885$var$game.moveRight();\n                break;\n            case \"ArrowUp\":\n                $197cd56b15c33885$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                $197cd56b15c33885$var$game.moveDown();\n                break;\n        }\n        $197cd56b15c33885$var$renderGame();\n    }\n});\nvar $197cd56b15c33885$var$button = document.querySelector(\".start\");\n$197cd56b15c33885$var$button.addEventListener(\"click\", function() {\n    if ($197cd56b15c33885$var$game.getStatus() === \"playing\") {\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$renderGame();\n        $197cd56b15c33885$var$button.classList.remove(\"start\");\n        $197cd56b15c33885$var$button.classList.add(\"restart\");\n        $197cd56b15c33885$var$button.textContent = \"Restart\";\n    }\n    if ($197cd56b15c33885$var$game.getStatus() === \"win\") {\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$renderGame();\n        $197cd56b15c33885$var$button.classList.remove(\"start\");\n        $197cd56b15c33885$var$button.classList.add(\"restart\");\n        $197cd56b15c33885$var$button.textContent = \"Restart\";\n    }\n    if ($197cd56b15c33885$var$game.getStatus() === \"lose\") {\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$renderGame();\n        $197cd56b15c33885$var$button.classList.remove(\"start\");\n        $197cd56b15c33885$var$button.classList.add(\"restart\");\n        $197cd56b15c33885$var$button.textContent = \"Restart\";\n    }\n    if ($197cd56b15c33885$var$game.getStatus() === \"idle\") {\n        $197cd56b15c33885$var$game.start();\n        $197cd56b15c33885$var$renderGame();\n        $197cd56b15c33885$var$button.classList.remove(\"start\");\n        $197cd56b15c33885$var$button.classList.add(\"restart\");\n        $197cd56b15c33885$var$button.textContent = \"Restart\";\n    }\n});\nvar $197cd56b15c33885$var$renderGame = function() {\n    var fieldCells = document.querySelectorAll(\".field-cell\");\n    // Clear the board\n    fieldCells.forEach(function(cell) {\n        cell.textContent = \"\";\n        cell.classList.remove(\"field-cell--2\");\n        cell.classList.remove(\"field-cell--4\");\n        cell.classList.remove(\"field-cell--8\");\n        cell.classList.remove(\"field-cell--16\");\n        cell.classList.remove(\"field-cell--32\");\n        cell.classList.remove(\"field-cell--64\");\n        cell.classList.remove(\"field-cell--128\");\n        cell.classList.remove(\"field-cell--256\");\n        cell.classList.remove(\"field-cell--512\");\n        cell.classList.remove(\"field-cell--1024\");\n        cell.classList.remove(\"field-cell--2048\");\n    });\n    // Render the game state\n    for(var row = 0; row < $197cd56b15c33885$var$game.size; row++)for(var col = 0; col < $197cd56b15c33885$var$game.size; col++){\n        var cellIndex = row * $197cd56b15c33885$var$game.size + col;\n        var cellValue = $197cd56b15c33885$var$game.board[row][col];\n        if (cellValue !== 0) {\n            fieldCells[cellIndex].textContent = cellValue;\n            fieldCells[cellIndex].classList.add(\"field-cell\");\n            fieldCells[cellIndex].classList.add(\"field-cell--\".concat(cellValue));\n        }\n    }\n    // Update score\n    document.querySelector(\".game-score\").textContent = \"\".concat($197cd56b15c33885$var$game.score);\n    var win = document.querySelector(\".message-win\");\n    var lose = document.querySelector(\".message-lose\");\n    var start = document.querySelector(\".message-start\");\n    if ($197cd56b15c33885$var$game.getStatus() === \"win\") {\n        win.classList.remove(\"hidden\");\n        lose.classList.add(\"hidden\");\n        start.classList.add(\"hidden\");\n    }\n    if ($197cd56b15c33885$var$game.getStatus() === \"lose\") {\n        win.classList.add(\"hidden\");\n        lose.classList.remove(\"hidden\");\n        start.classList.add(\"hidden\");\n    }\n    if ($197cd56b15c33885$var$game.getStatus() === \"playing\") {\n        win.classList.add(\"hidden\");\n        lose.classList.add(\"hidden\");\n        start.classList.add(\"hidden\");\n    }\n};\n\n})();\n//# sourceMappingURL=index.3e12b78a.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() === 'playing') {\n    switch (e.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n    }\n    renderGame();\n  }\n});\n\nconst button = document.querySelector('.start');\n\nbutton.addEventListener('click', () => {\n  if (game.getStatus() === 'playing') {\n    game.restart();\n    renderGame();\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n  }\n\n  if (game.getStatus() === 'win') {\n    game.restart();\n    renderGame();\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n  }\n\n  if (game.getStatus() === 'lose') {\n    game.restart();\n    renderGame();\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n  }\n\n  if (game.getStatus() === 'idle') {\n    game.start();\n    renderGame();\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n  }\n});\n\nconst renderGame = () => {\n  const fieldCells = document.querySelectorAll('.field-cell');\n\n  // Clear the board\n  fieldCells.forEach((cell) => {\n    cell.textContent = '';\n    cell.classList.remove('field-cell--2');\n    cell.classList.remove('field-cell--4');\n    cell.classList.remove('field-cell--8');\n    cell.classList.remove('field-cell--16');\n    cell.classList.remove('field-cell--32');\n    cell.classList.remove('field-cell--64');\n    cell.classList.remove('field-cell--128');\n    cell.classList.remove('field-cell--256');\n    cell.classList.remove('field-cell--512');\n    cell.classList.remove('field-cell--1024');\n    cell.classList.remove('field-cell--2048');\n  });\n\n  // Render the game state\n  for (let row = 0; row < game.size; row++) {\n    for (let col = 0; col < game.size; col++) {\n      const cellIndex = row * game.size + col;\n      const cellValue = game.board[row][col];\n\n      if (cellValue !== 0) {\n        fieldCells[cellIndex].textContent = cellValue;\n        fieldCells[cellIndex].classList.add('field-cell');\n        fieldCells[cellIndex].classList.add(`field-cell--${cellValue}`);\n      }\n    }\n  }\n\n  // Update score\n  document.querySelector('.game-score').textContent = `${game.score}`;\n\n  const win = document.querySelector('.message-win');\n  const lose = document.querySelector('.message-lose');\n  const start = document.querySelector('.message-start');\n\n  if (game.getStatus() === 'win') {\n    win.classList.remove('hidden');\n    lose.classList.add('hidden');\n    start.classList.add('hidden');\n  }\n\n  if (game.getStatus() === 'lose') {\n    win.classList.add('hidden');\n    lose.classList.remove('hidden');\n    start.classList.add('hidden');\n  }\n\n  if (game.getStatus() === 'playing') {\n    win.classList.add('hidden');\n    lose.classList.add('hidden');\n    start.classList.add('hidden');\n  }\n};\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.size = 4;\n\n    this.board = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.score = 0;\n    this.status = 'idle'; // 'idle', 'playing', 'win', 'lose'\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let row = 0; row < this.size; row++) {\n      const originalRow = [...this.board[row]];\n      const newRow = [];\n\n      for (let col = 0; col < this.size; col++) {\n        if (this.board[row][col] !== 0) {\n          newRow.push(this.board[row][col]);\n        }\n      }\n\n      // Злиття плиток\n      const mergedRow = [];\n\n      for (let i = 0; i < newRow.length; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          mergedRow.push(newRow[i] * 2);\n          this.score += newRow[i] * 2;\n          i++;\n        } else {\n          mergedRow.push(newRow[i]);\n        }\n      }\n\n      // Заповнення порожніх клітинок нулями\n      while (mergedRow.length < this.size) {\n        mergedRow.push(0);\n      }\n\n      // Оновлюємо дошку тільки якщо змінилася\n      if (JSON.stringify(originalRow) !== JSON.stringify(mergedRow)) {\n        this.board[row] = mergedRow;\n        moved = true;\n      }\n    }\n\n    // Додаємо випадкову плитку лише якщо дошка змінилася\n    if (moved) {\n      this.addRandomTile();\n    }\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let row = 0; row < this.size; row++) {\n      const originalRow = [...this.board[row]];\n      const reversedRow = [...originalRow].reverse();\n      const filtered = reversedRow.filter((val) => val !== 0);\n      const merged = [];\n\n      for (let i = 0; i < filtered.length; i++) {\n        if (filtered[i] === filtered[i + 1]) {\n          merged.push(filtered[i] * 2);\n          this.score += filtered[i] * 2;\n          i++;\n        } else {\n          merged.push(filtered[i]);\n        }\n      }\n\n      while (merged.length < this.size) {\n        merged.push(0);\n      }\n\n      const newRow = merged.reverse();\n\n      if (JSON.stringify(originalRow) !== JSON.stringify(newRow)) {\n        this.board[row] = newRow;\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let col = 0; col < this.size; col++) {\n      const originalColumn = [];\n\n      for (let row = 0; row < this.size; row++) {\n        originalColumn.push(this.board[row][col]);\n      }\n\n      const filtered = originalColumn.filter((val) => val !== 0);\n      const merged = [];\n\n      for (let i = 0; i < filtered.length; i++) {\n        if (filtered[i] === filtered[i + 1]) {\n          merged.push(filtered[i] * 2);\n          this.score += filtered[i] * 2;\n          i++;\n        } else {\n          merged.push(filtered[i]);\n        }\n      }\n\n      while (merged.length < this.size) {\n        merged.push(0);\n      }\n\n      const movedColumn = merged;\n\n      for (let row = 0; row < this.size; row++) {\n        if (this.board[row][col] !== movedColumn[row]) {\n          moved = true;\n        }\n        this.board[row][col] = movedColumn[row];\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let col = 0; col < this.size; col++) {\n      const originalColumn = [];\n\n      for (let row = this.size - 1; row >= 0; row--) {\n        originalColumn.push(this.board[row][col]);\n      }\n\n      const filtered = originalColumn.filter((val) => val !== 0);\n\n      const merged = [];\n\n      for (let i = 0; i < filtered.length; i++) {\n        if (filtered[i] === filtered[i + 1]) {\n          merged.push(filtered[i] * 2);\n          this.score += filtered[i] * 2;\n          i++; // пропускаємо наступний\n        } else {\n          merged.push(filtered[i]);\n        }\n      }\n\n      while (merged.length < this.size) {\n        merged.push(0);\n      }\n\n      for (let row = this.size - 1; row >= 0; row--) {\n        const newValue = merged[this.size - 1 - row];\n\n        if (this.board[row][col] !== newValue) {\n          moved = true;\n          this.board[row][col] = newValue;\n        }\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    if (this.isGameWon()) {\n      this.status = 'win';\n    } else if (this.isGameLost()) {\n      this.status = 'lose';\n    } else if (this.isGameInProgress()) {\n      this.status = 'playing';\n    } else {\n      this.status = 'idle';\n    }\n\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n    this.status = 'idle';\n    this.start();\n  }\n\n  /**\n   * Adds a random tile to the board.\n   *\n   * @returns {number[][]}\n   */\n\n  addRandomTile() {\n    const emptyTiles = this.getEmptyTiles();\n\n    if (emptyTiles.length === 0) {\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * emptyTiles.length);\n    const [row, col] = emptyTiles[randomIndex];\n\n    this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n    this.score += this.board[row][col];\n    this.status = 'playing';\n  }\n\n  /**\n   * Returns the empty tiles on the board.\n   *\n   * @returns {number[][]}\n   */\n  getEmptyTiles() {\n    const emptyTiles = [];\n\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (this.board[row][col] === 0) {\n          emptyTiles.push([row, col]);\n        }\n      }\n    }\n\n    return emptyTiles;\n  }\n  /**\n   * Checks if the game is over.\n   *\n   * @returns {boolean}\n   */\n  isGameOver() {\n    // Check if there are any empty tiles\n    if (this.getEmptyTiles().length > 0) {\n      return false;\n    }\n\n    // Check if there are any possible moves\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (\n          (col < this.size - 1 &&\n            this.board[row][col] === this.board[row][col + 1]) ||\n          (row < this.size - 1 &&\n            this.board[row][col] === this.board[row + 1][col])\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Checks if the game is won.\n   *\n   * @returns {boolean}\n   */\n  isGameWon() {\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (this.board[row][col] === 2048) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Checks if the game is lost.\n   *\n   * @returns {boolean}\n   */\n  isGameLost() {\n    return this.isGameOver() && !this.isGameWon();\n  }\n  /**\n   * Checks if the game is in progress.\n   *\n   * @returns {boolean}\n   */\n  isGameInProgress() {\n    return this.status === 'playing';\n  }\n  /**\n   * Checks if the game is idle.\n   *\n   * @returns {boolean}\n   */\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_with_holes } from \"./_array_with_holes.js\";\nimport { _ as _iterable_to_array_limit } from \"./_iterable_to_array_limit.js\";\nimport { _ as _non_iterable_rest } from \"./_non_iterable_rest.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nexport { _sliced_to_array as _ };\n","function _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nexport { _array_with_holes as _ };\n","function _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n\n    try {\n        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally {\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally {\n            if (_d) throw _e;\n        }\n    }\n\n    return _arr;\n}\nexport { _iterable_to_array_limit as _ };\n","function _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_rest as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$d4f69c5c6c4654b1$export$71511d61b312f219","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","$227c6742e0ff6f82$export$71511d61b312f219","isArray","iter","Symbol","iterator","TypeError","$197cd56b15c33885$var$game","protoProps","Game","initialState","instance","Constructor","size","board","score","status","key","value","moved","row","originalRow","newRow","col","push","mergedRow","JSON","stringify","addRandomTile","_this","_loop","filtered","reversedRow","reverse","filter","val","merged","originalColumn","row1","movedColumn","newValue","isGameWon","isGameLost","isGameInProgress","start","emptyTiles","getEmptyTiles","randomIndex","Math","floor","random","_emptyTiles_randomIndex","_s","_e","_i","_arr","_n","_d","next","done","err","isGameOver","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","document","addEventListener","e","getStatus","moveLeft","moveRight","moveUp","moveDown","$197cd56b15c33885$var$renderGame","$197cd56b15c33885$var$button","querySelector","restart","classList","remove","add","textContent","fieldCells","querySelectorAll","forEach","cell","cellIndex","cellValue","concat","win","lose"],"version":3,"file":"index.3e12b78a.js.map"}