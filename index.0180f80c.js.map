{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        this.size = 4;\n        this.board = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"idle\"; // 'idle', 'playing', 'win', 'lose'\n    }\n    moveLeft() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let row = 0; row < this.size; row++){\n            const originalRow = [\n                ...this.board[row]\n            ];\n            const newRow = [];\n            for(let col = 0; col < this.size; col++)if (this.board[row][col] !== 0) newRow.push(this.board[row][col]);\n            // Злиття плиток\n            const mergedRow = [];\n            for(let i = 0; i < newRow.length; i++)if (newRow[i] === newRow[i + 1]) {\n                mergedRow.push(newRow[i] * 2);\n                this.score += newRow[i] * 2;\n                i++;\n            } else mergedRow.push(newRow[i]);\n            // Заповнення порожніх клітинок нулями\n            while(mergedRow.length < this.size)mergedRow.push(0);\n            // Оновлюємо дошку тільки якщо змінилася\n            if (JSON.stringify(originalRow) !== JSON.stringify(mergedRow)) {\n                this.board[row] = mergedRow;\n                moved = true;\n            }\n        }\n        // Додаємо випадкову плитку лише якщо дошка змінилася\n        if (moved) this.addRandomTile();\n    }\n    moveRight() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let row = 0; row < this.size; row++){\n            const originalRow = [\n                ...this.board[row]\n            ];\n            const reversedRow = [\n                ...originalRow\n            ].reverse();\n            const filtered = reversedRow.filter((val)=>val !== 0);\n            const merged = [];\n            for(let i = 0; i < filtered.length; i++)if (filtered[i] === filtered[i + 1]) {\n                merged.push(filtered[i] * 2);\n                this.score += filtered[i] * 2;\n                i++;\n            } else merged.push(filtered[i]);\n            while(merged.length < this.size)merged.push(0);\n            const newRow = merged.reverse();\n            if (JSON.stringify(originalRow) !== JSON.stringify(newRow)) {\n                this.board[row] = newRow;\n                moved = true;\n            }\n        }\n        if (moved) this.addRandomTile();\n    }\n    moveUp() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let col = 0; col < this.size; col++){\n            const originalColumn = [];\n            for(let row = 0; row < this.size; row++)originalColumn.push(this.board[row][col]);\n            const filtered = originalColumn.filter((val)=>val !== 0);\n            const merged = [];\n            for(let i = 0; i < filtered.length; i++)if (filtered[i] === filtered[i + 1]) {\n                merged.push(filtered[i] * 2);\n                this.score += filtered[i] * 2;\n                i++;\n            } else merged.push(filtered[i]);\n            while(merged.length < this.size)merged.push(0);\n            const movedColumn = merged;\n            for(let row = 0; row < this.size; row++){\n                if (this.board[row][col] !== movedColumn[row]) moved = true;\n                this.board[row][col] = movedColumn[row];\n            }\n        }\n        if (moved) this.addRandomTile();\n    }\n    moveDown() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let col = 0; col < this.size; col++){\n            const originalColumn = [];\n            for(let row = this.size - 1; row >= 0; row--)originalColumn.push(this.board[row][col]);\n            const filtered = originalColumn.filter((val)=>val !== 0);\n            const merged = [];\n            for(let i = 0; i < filtered.length; i++)if (filtered[i] === filtered[i + 1]) {\n                merged.push(filtered[i] * 2);\n                this.score += filtered[i] * 2;\n                i++; // пропускаємо наступний\n            } else merged.push(filtered[i]);\n            while(merged.length < this.size)merged.push(0);\n            for(let row = this.size - 1; row >= 0; row--){\n                const newValue = merged[this.size - 1 - row];\n                if (this.board[row][col] !== newValue) {\n                    moved = true;\n                    this.board[row][col] = newValue;\n                }\n            }\n        }\n        if (moved) this.addRandomTile();\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        if (this.isGameWon()) this.status = \"win\";\n        else if (this.isGameLost()) this.status = \"lose\";\n        else if (this.isGameInProgress()) this.status = \"playing\";\n        else this.status = \"idle\";\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"idle\";\n        this.start();\n    }\n    /**\n   * Adds a random tile to the board.\n   *\n   * @returns {number[][]}\n   */ addRandomTile() {\n        const emptyTiles = this.getEmptyTiles();\n        if (emptyTiles.length === 0) return;\n        const randomIndex = Math.floor(Math.random() * emptyTiles.length);\n        const [row, col] = emptyTiles[randomIndex];\n        this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n        this.score += this.board[row][col];\n        this.status = \"playing\";\n    }\n    /**\n   * Returns the empty tiles on the board.\n   *\n   * @returns {number[][]}\n   */ getEmptyTiles() {\n        const emptyTiles = [];\n        for(let row = 0; row < this.size; row++){\n            for(let col = 0; col < this.size; col++)if (this.board[row][col] === 0) emptyTiles.push([\n                row,\n                col\n            ]);\n        }\n        return emptyTiles;\n    }\n    /**\n   * Checks if the game is over.\n   *\n   * @returns {boolean}\n   */ isGameOver() {\n        // Check if there are any empty tiles\n        if (this.getEmptyTiles().length > 0) return false;\n        // Check if there are any possible moves\n        for(let row = 0; row < this.size; row++)for(let col = 0; col < this.size; col++){\n            if (col < this.size - 1 && this.board[row][col] === this.board[row][col + 1] || row < this.size - 1 && this.board[row][col] === this.board[row + 1][col]) return false;\n        }\n        return true;\n    }\n    /**\n   * Checks if the game is won.\n   *\n   * @returns {boolean}\n   */ isGameWon() {\n        for(let row = 0; row < this.size; row++)for(let col = 0; col < this.size; col++){\n            if (this.board[row][col] === 2048) return true;\n        }\n        return false;\n    }\n    /**\n   * Checks if the game is lost.\n   *\n   * @returns {boolean}\n   */ isGameLost() {\n        return this.isGameOver() && !this.isGameWon();\n    }\n    /**\n   * Checks if the game is in progress.\n   *\n   * @returns {boolean}\n   */ isGameInProgress() {\n        return this.status === \"playing\";\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") {\n        switch(e.key){\n            case \"ArrowLeft\":\n                $09e991522ca7e64e$var$game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                $09e991522ca7e64e$var$game.moveRight();\n                break;\n            case \"ArrowUp\":\n                $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                $09e991522ca7e64e$var$game.moveDown();\n                break;\n        }\n        $09e991522ca7e64e$var$renderGame();\n    }\n});\nconst $09e991522ca7e64e$var$button = document.querySelector(\".start\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$renderGame();\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n    }\n    if ($09e991522ca7e64e$var$game.getStatus() === \"win\") {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$renderGame();\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n    }\n    if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$renderGame();\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n    }\n    if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$renderGame();\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n    }\n});\nconst $09e991522ca7e64e$var$renderGame = ()=>{\n    const fieldCells = document.querySelectorAll(\".field-cell\");\n    // Clear the board\n    fieldCells.forEach((cell)=>{\n        cell.textContent = \"\";\n        cell.classList.remove(\"field-cell--2\");\n        cell.classList.remove(\"field-cell--4\");\n        cell.classList.remove(\"field-cell--8\");\n        cell.classList.remove(\"field-cell--16\");\n        cell.classList.remove(\"field-cell--32\");\n        cell.classList.remove(\"field-cell--64\");\n        cell.classList.remove(\"field-cell--128\");\n        cell.classList.remove(\"field-cell--256\");\n        cell.classList.remove(\"field-cell--512\");\n        cell.classList.remove(\"field-cell--1024\");\n        cell.classList.remove(\"field-cell--2048\");\n    });\n    // Render the game state\n    for(let row = 0; row < $09e991522ca7e64e$var$game.size; row++)for(let col = 0; col < $09e991522ca7e64e$var$game.size; col++){\n        const cellIndex = row * $09e991522ca7e64e$var$game.size + col;\n        const cellValue = $09e991522ca7e64e$var$game.board[row][col];\n        if (cellValue !== 0) {\n            fieldCells[cellIndex].textContent = cellValue;\n            fieldCells[cellIndex].classList.add(\"field-cell\");\n            fieldCells[cellIndex].classList.add(`field-cell--${cellValue}`);\n        }\n    }\n    // Update score\n    document.querySelector(\".game-score\").textContent = `${$09e991522ca7e64e$var$game.score}`;\n    const win = document.querySelector(\".message-win\");\n    const lose = document.querySelector(\".message-lose\");\n    const start = document.querySelector(\".message-start\");\n    if ($09e991522ca7e64e$var$game.getStatus() === \"win\") {\n        win.classList.remove(\"hidden\");\n        lose.classList.add(\"hidden\");\n        start.classList.add(\"hidden\");\n    }\n    if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") {\n        win.classList.add(\"hidden\");\n        lose.classList.remove(\"hidden\");\n        start.classList.add(\"hidden\");\n    }\n    if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") {\n        win.classList.add(\"hidden\");\n        lose.classList.add(\"hidden\");\n        start.classList.add(\"hidden\");\n    }\n};\n\n\n//# sourceMappingURL=index.0180f80c.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() === 'playing') {\n    switch (e.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n    }\n    renderGame();\n  }\n});\n\nconst button = document.querySelector('.start');\n\nbutton.addEventListener('click', () => {\n  if (game.getStatus() === 'playing') {\n    game.restart();\n    renderGame();\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n  }\n\n  if (game.getStatus() === 'win') {\n    game.restart();\n    renderGame();\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n  }\n\n  if (game.getStatus() === 'lose') {\n    game.restart();\n    renderGame();\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n  }\n\n  if (game.getStatus() === 'idle') {\n    game.start();\n    renderGame();\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n  }\n});\n\nconst renderGame = () => {\n  const fieldCells = document.querySelectorAll('.field-cell');\n\n  // Clear the board\n  fieldCells.forEach((cell) => {\n    cell.textContent = '';\n    cell.classList.remove('field-cell--2');\n    cell.classList.remove('field-cell--4');\n    cell.classList.remove('field-cell--8');\n    cell.classList.remove('field-cell--16');\n    cell.classList.remove('field-cell--32');\n    cell.classList.remove('field-cell--64');\n    cell.classList.remove('field-cell--128');\n    cell.classList.remove('field-cell--256');\n    cell.classList.remove('field-cell--512');\n    cell.classList.remove('field-cell--1024');\n    cell.classList.remove('field-cell--2048');\n  });\n\n  // Render the game state\n  for (let row = 0; row < game.size; row++) {\n    for (let col = 0; col < game.size; col++) {\n      const cellIndex = row * game.size + col;\n      const cellValue = game.board[row][col];\n\n      if (cellValue !== 0) {\n        fieldCells[cellIndex].textContent = cellValue;\n        fieldCells[cellIndex].classList.add('field-cell');\n        fieldCells[cellIndex].classList.add(`field-cell--${cellValue}`);\n      }\n    }\n  }\n\n  // Update score\n  document.querySelector('.game-score').textContent = `${game.score}`;\n\n  const win = document.querySelector('.message-win');\n  const lose = document.querySelector('.message-lose');\n  const start = document.querySelector('.message-start');\n\n  if (game.getStatus() === 'win') {\n    win.classList.remove('hidden');\n    lose.classList.add('hidden');\n    start.classList.add('hidden');\n  }\n\n  if (game.getStatus() === 'lose') {\n    win.classList.add('hidden');\n    lose.classList.remove('hidden');\n    start.classList.add('hidden');\n  }\n\n  if (game.getStatus() === 'playing') {\n    win.classList.add('hidden');\n    lose.classList.add('hidden');\n    start.classList.add('hidden');\n  }\n};\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.size = 4;\n\n    this.board = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.score = 0;\n    this.status = 'idle'; // 'idle', 'playing', 'win', 'lose'\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let row = 0; row < this.size; row++) {\n      const originalRow = [...this.board[row]];\n      const newRow = [];\n\n      for (let col = 0; col < this.size; col++) {\n        if (this.board[row][col] !== 0) {\n          newRow.push(this.board[row][col]);\n        }\n      }\n\n      // Злиття плиток\n      const mergedRow = [];\n\n      for (let i = 0; i < newRow.length; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          mergedRow.push(newRow[i] * 2);\n          this.score += newRow[i] * 2;\n          i++;\n        } else {\n          mergedRow.push(newRow[i]);\n        }\n      }\n\n      // Заповнення порожніх клітинок нулями\n      while (mergedRow.length < this.size) {\n        mergedRow.push(0);\n      }\n\n      // Оновлюємо дошку тільки якщо змінилася\n      if (JSON.stringify(originalRow) !== JSON.stringify(mergedRow)) {\n        this.board[row] = mergedRow;\n        moved = true;\n      }\n    }\n\n    // Додаємо випадкову плитку лише якщо дошка змінилася\n    if (moved) {\n      this.addRandomTile();\n    }\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let row = 0; row < this.size; row++) {\n      const originalRow = [...this.board[row]];\n      const reversedRow = [...originalRow].reverse();\n      const filtered = reversedRow.filter((val) => val !== 0);\n      const merged = [];\n\n      for (let i = 0; i < filtered.length; i++) {\n        if (filtered[i] === filtered[i + 1]) {\n          merged.push(filtered[i] * 2);\n          this.score += filtered[i] * 2;\n          i++;\n        } else {\n          merged.push(filtered[i]);\n        }\n      }\n\n      while (merged.length < this.size) {\n        merged.push(0);\n      }\n\n      const newRow = merged.reverse();\n\n      if (JSON.stringify(originalRow) !== JSON.stringify(newRow)) {\n        this.board[row] = newRow;\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let col = 0; col < this.size; col++) {\n      const originalColumn = [];\n\n      for (let row = 0; row < this.size; row++) {\n        originalColumn.push(this.board[row][col]);\n      }\n\n      const filtered = originalColumn.filter((val) => val !== 0);\n      const merged = [];\n\n      for (let i = 0; i < filtered.length; i++) {\n        if (filtered[i] === filtered[i + 1]) {\n          merged.push(filtered[i] * 2);\n          this.score += filtered[i] * 2;\n          i++;\n        } else {\n          merged.push(filtered[i]);\n        }\n      }\n\n      while (merged.length < this.size) {\n        merged.push(0);\n      }\n\n      const movedColumn = merged;\n\n      for (let row = 0; row < this.size; row++) {\n        if (this.board[row][col] !== movedColumn[row]) {\n          moved = true;\n        }\n        this.board[row][col] = movedColumn[row];\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let col = 0; col < this.size; col++) {\n      const originalColumn = [];\n\n      for (let row = this.size - 1; row >= 0; row--) {\n        originalColumn.push(this.board[row][col]);\n      }\n\n      const filtered = originalColumn.filter((val) => val !== 0);\n\n      const merged = [];\n\n      for (let i = 0; i < filtered.length; i++) {\n        if (filtered[i] === filtered[i + 1]) {\n          merged.push(filtered[i] * 2);\n          this.score += filtered[i] * 2;\n          i++; // пропускаємо наступний\n        } else {\n          merged.push(filtered[i]);\n        }\n      }\n\n      while (merged.length < this.size) {\n        merged.push(0);\n      }\n\n      for (let row = this.size - 1; row >= 0; row--) {\n        const newValue = merged[this.size - 1 - row];\n\n        if (this.board[row][col] !== newValue) {\n          moved = true;\n          this.board[row][col] = newValue;\n        }\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    if (this.isGameWon()) {\n      this.status = 'win';\n    } else if (this.isGameLost()) {\n      this.status = 'lose';\n    } else if (this.isGameInProgress()) {\n      this.status = 'playing';\n    } else {\n      this.status = 'idle';\n    }\n\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n    this.status = 'idle';\n    this.start();\n  }\n\n  /**\n   * Adds a random tile to the board.\n   *\n   * @returns {number[][]}\n   */\n\n  addRandomTile() {\n    const emptyTiles = this.getEmptyTiles();\n\n    if (emptyTiles.length === 0) {\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * emptyTiles.length);\n    const [row, col] = emptyTiles[randomIndex];\n\n    this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n    this.score += this.board[row][col];\n    this.status = 'playing';\n  }\n\n  /**\n   * Returns the empty tiles on the board.\n   *\n   * @returns {number[][]}\n   */\n  getEmptyTiles() {\n    const emptyTiles = [];\n\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (this.board[row][col] === 0) {\n          emptyTiles.push([row, col]);\n        }\n      }\n    }\n\n    return emptyTiles;\n  }\n  /**\n   * Checks if the game is over.\n   *\n   * @returns {boolean}\n   */\n  isGameOver() {\n    // Check if there are any empty tiles\n    if (this.getEmptyTiles().length > 0) {\n      return false;\n    }\n\n    // Check if there are any possible moves\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (\n          (col < this.size - 1 &&\n            this.board[row][col] === this.board[row][col + 1]) ||\n          (row < this.size - 1 &&\n            this.board[row][col] === this.board[row + 1][col])\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Checks if the game is won.\n   *\n   * @returns {boolean}\n   */\n  isGameWon() {\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (this.board[row][col] === 2048) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Checks if the game is lost.\n   *\n   * @returns {boolean}\n   */\n  isGameLost() {\n    return this.isGameOver() && !this.isGameWon();\n  }\n  /**\n   * Checks if the game is in progress.\n   *\n   * @returns {boolean}\n   */\n  isGameInProgress() {\n    return this.status === 'playing';\n  }\n  /**\n   * Checks if the game is idle.\n   *\n   * @returns {boolean}\n   */\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","size","board","score","status","moveLeft","moved","row","originalRow","newRow","col","push","mergedRow","i","length","JSON","stringify","addRandomTile","moveRight","filtered","reversedRow","reverse","filter","val","merged","moveUp","originalColumn","movedColumn","moveDown","newValue","getScore","getState","getStatus","isGameWon","isGameLost","isGameInProgress","start","restart","emptyTiles","getEmptyTiles","randomIndex","Math","floor","random","isGameOver","document","addEventListener","e","key","$09e991522ca7e64e$var$renderGame","$09e991522ca7e64e$var$button","querySelector","classList","remove","add","textContent","fieldCells","querySelectorAll","forEach","cell","cellIndex","cellValue","win","lose"],"version":3,"file":"index.0180f80c.js.map"}